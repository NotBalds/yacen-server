// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: yacen-api/yacen/latest/api.proto

package yacen_api_v2_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Yacen_CreateRoom_FullMethodName           = "/yacen_api.v2_2.Yacen/CreateRoom"
	Yacen_GetRoomInfo_FullMethodName          = "/yacen_api.v2_2.Yacen/GetRoomInfo"
	Yacen_UpdateRoomInfo_FullMethodName       = "/yacen_api.v2_2.Yacen/UpdateRoomInfo"
	Yacen_DeleteRoom_FullMethodName           = "/yacen_api.v2_2.Yacen/DeleteRoom"
	Yacen_RequestJoinRoom_FullMethodName      = "/yacen_api.v2_2.Yacen/RequestJoinRoom"
	Yacen_GetJoinRequestStatus_FullMethodName = "/yacen_api.v2_2.Yacen/GetJoinRequestStatus"
	Yacen_SendMessage_FullMethodName          = "/yacen_api.v2_2.Yacen/SendMessage"
	Yacen_GetMessages_FullMethodName          = "/yacen_api.v2_2.Yacen/GetMessages"
	Yacen_UploadFile_FullMethodName           = "/yacen_api.v2_2.Yacen/UploadFile"
	Yacen_DownloadFile_FullMethodName         = "/yacen_api.v2_2.Yacen/DownloadFile"
	Yacen_ApproveJoinRequest_FullMethodName   = "/yacen_api.v2_2.Yacen/ApproveJoinRequest"
	Yacen_GiveExtendedRights_FullMethodName   = "/yacen_api.v2_2.Yacen/GiveExtendedRights"
	Yacen_RemoveExtendedRights_FullMethodName = "/yacen_api.v2_2.Yacen/RemoveExtendedRights"
)

// YacenClient is the client API for Yacen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YacenClient interface {
	// Room Base
	CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...grpc.CallOption) (*CreateRoomRes, error)
	GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...grpc.CallOption) (*GetRoomInfoRes, error)
	UpdateRoomInfo(ctx context.Context, in *UpdateRoomInfoReq, opts ...grpc.CallOption) (*UpdateRoomInfoRes, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomReq, opts ...grpc.CallOption) (*DeleteRoomRes, error)
	// Non-Members and upper
	RequestJoinRoom(ctx context.Context, in *RequestJoinRoomReq, opts ...grpc.CallOption) (*RequestJoinRoomRes, error)
	GetJoinRequestStatus(ctx context.Context, in *GetJoinRequestStatusReq, opts ...grpc.CallOption) (*GetJoinRequestStatusRes, error)
	// Members and upper
	SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageRes, error)
	GetMessages(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMessageRes], error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileReq, UploadFileRes], error)
	DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileRes], error)
	// Extended Rights and upper
	ApproveJoinRequest(ctx context.Context, in *ApproveJoinRequestReq, opts ...grpc.CallOption) (*ApproveJoinRequestRes, error)
	// Admin & Owner
	GiveExtendedRights(ctx context.Context, in *GiveExtendedRightsReq, opts ...grpc.CallOption) (*GiveExtendedRightsRes, error)
	RemoveExtendedRights(ctx context.Context, in *RemoveExtendedRightsReq, opts ...grpc.CallOption) (*RemoveExtendedRightsRes, error)
}

type yacenClient struct {
	cc grpc.ClientConnInterface
}

func NewYacenClient(cc grpc.ClientConnInterface) YacenClient {
	return &yacenClient{cc}
}

func (c *yacenClient) CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...grpc.CallOption) (*CreateRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomRes)
	err := c.cc.Invoke(ctx, Yacen_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) GetRoomInfo(ctx context.Context, in *GetRoomInfoReq, opts ...grpc.CallOption) (*GetRoomInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomInfoRes)
	err := c.cc.Invoke(ctx, Yacen_GetRoomInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) UpdateRoomInfo(ctx context.Context, in *UpdateRoomInfoReq, opts ...grpc.CallOption) (*UpdateRoomInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoomInfoRes)
	err := c.cc.Invoke(ctx, Yacen_UpdateRoomInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) DeleteRoom(ctx context.Context, in *DeleteRoomReq, opts ...grpc.CallOption) (*DeleteRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomRes)
	err := c.cc.Invoke(ctx, Yacen_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) RequestJoinRoom(ctx context.Context, in *RequestJoinRoomReq, opts ...grpc.CallOption) (*RequestJoinRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestJoinRoomRes)
	err := c.cc.Invoke(ctx, Yacen_RequestJoinRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) GetJoinRequestStatus(ctx context.Context, in *GetJoinRequestStatusReq, opts ...grpc.CallOption) (*GetJoinRequestStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJoinRequestStatusRes)
	err := c.cc.Invoke(ctx, Yacen_GetJoinRequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) SendMessage(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageRes)
	err := c.cc.Invoke(ctx, Yacen_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) GetMessages(ctx context.Context, in *GetMessageReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetMessageRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Yacen_ServiceDesc.Streams[0], Yacen_GetMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetMessageReq, GetMessageRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Yacen_GetMessagesClient = grpc.ServerStreamingClient[GetMessageRes]

func (c *yacenClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadFileReq, UploadFileRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Yacen_ServiceDesc.Streams[1], Yacen_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadFileReq, UploadFileRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Yacen_UploadFileClient = grpc.ClientStreamingClient[UploadFileReq, UploadFileRes]

func (c *yacenClient) DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadFileRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Yacen_ServiceDesc.Streams[2], Yacen_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadFileReq, DownloadFileRes]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Yacen_DownloadFileClient = grpc.ServerStreamingClient[DownloadFileRes]

func (c *yacenClient) ApproveJoinRequest(ctx context.Context, in *ApproveJoinRequestReq, opts ...grpc.CallOption) (*ApproveJoinRequestRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveJoinRequestRes)
	err := c.cc.Invoke(ctx, Yacen_ApproveJoinRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) GiveExtendedRights(ctx context.Context, in *GiveExtendedRightsReq, opts ...grpc.CallOption) (*GiveExtendedRightsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GiveExtendedRightsRes)
	err := c.cc.Invoke(ctx, Yacen_GiveExtendedRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yacenClient) RemoveExtendedRights(ctx context.Context, in *RemoveExtendedRightsReq, opts ...grpc.CallOption) (*RemoveExtendedRightsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveExtendedRightsRes)
	err := c.cc.Invoke(ctx, Yacen_RemoveExtendedRights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YacenServer is the server API for Yacen service.
// All implementations must embed UnimplementedYacenServer
// for forward compatibility.
type YacenServer interface {
	// Room Base
	CreateRoom(context.Context, *CreateRoomReq) (*CreateRoomRes, error)
	GetRoomInfo(context.Context, *GetRoomInfoReq) (*GetRoomInfoRes, error)
	UpdateRoomInfo(context.Context, *UpdateRoomInfoReq) (*UpdateRoomInfoRes, error)
	DeleteRoom(context.Context, *DeleteRoomReq) (*DeleteRoomRes, error)
	// Non-Members and upper
	RequestJoinRoom(context.Context, *RequestJoinRoomReq) (*RequestJoinRoomRes, error)
	GetJoinRequestStatus(context.Context, *GetJoinRequestStatusReq) (*GetJoinRequestStatusRes, error)
	// Members and upper
	SendMessage(context.Context, *SendMessageReq) (*SendMessageRes, error)
	GetMessages(*GetMessageReq, grpc.ServerStreamingServer[GetMessageRes]) error
	UploadFile(grpc.ClientStreamingServer[UploadFileReq, UploadFileRes]) error
	DownloadFile(*DownloadFileReq, grpc.ServerStreamingServer[DownloadFileRes]) error
	// Extended Rights and upper
	ApproveJoinRequest(context.Context, *ApproveJoinRequestReq) (*ApproveJoinRequestRes, error)
	// Admin & Owner
	GiveExtendedRights(context.Context, *GiveExtendedRightsReq) (*GiveExtendedRightsRes, error)
	RemoveExtendedRights(context.Context, *RemoveExtendedRightsReq) (*RemoveExtendedRightsRes, error)
	mustEmbedUnimplementedYacenServer()
}

// UnimplementedYacenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedYacenServer struct{}

func (UnimplementedYacenServer) CreateRoom(context.Context, *CreateRoomReq) (*CreateRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedYacenServer) GetRoomInfo(context.Context, *GetRoomInfoReq) (*GetRoomInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomInfo not implemented")
}
func (UnimplementedYacenServer) UpdateRoomInfo(context.Context, *UpdateRoomInfoReq) (*UpdateRoomInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoomInfo not implemented")
}
func (UnimplementedYacenServer) DeleteRoom(context.Context, *DeleteRoomReq) (*DeleteRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedYacenServer) RequestJoinRoom(context.Context, *RequestJoinRoomReq) (*RequestJoinRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestJoinRoom not implemented")
}
func (UnimplementedYacenServer) GetJoinRequestStatus(context.Context, *GetJoinRequestStatusReq) (*GetJoinRequestStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJoinRequestStatus not implemented")
}
func (UnimplementedYacenServer) SendMessage(context.Context, *SendMessageReq) (*SendMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedYacenServer) GetMessages(*GetMessageReq, grpc.ServerStreamingServer[GetMessageRes]) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedYacenServer) UploadFile(grpc.ClientStreamingServer[UploadFileReq, UploadFileRes]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedYacenServer) DownloadFile(*DownloadFileReq, grpc.ServerStreamingServer[DownloadFileRes]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedYacenServer) ApproveJoinRequest(context.Context, *ApproveJoinRequestReq) (*ApproveJoinRequestRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveJoinRequest not implemented")
}
func (UnimplementedYacenServer) GiveExtendedRights(context.Context, *GiveExtendedRightsReq) (*GiveExtendedRightsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveExtendedRights not implemented")
}
func (UnimplementedYacenServer) RemoveExtendedRights(context.Context, *RemoveExtendedRightsReq) (*RemoveExtendedRightsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveExtendedRights not implemented")
}
func (UnimplementedYacenServer) mustEmbedUnimplementedYacenServer() {}
func (UnimplementedYacenServer) testEmbeddedByValue()               {}

// UnsafeYacenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YacenServer will
// result in compilation errors.
type UnsafeYacenServer interface {
	mustEmbedUnimplementedYacenServer()
}

func RegisterYacenServer(s grpc.ServiceRegistrar, srv YacenServer) {
	// If the following call pancis, it indicates UnimplementedYacenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Yacen_ServiceDesc, srv)
}

func _Yacen_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).CreateRoom(ctx, req.(*CreateRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_GetRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).GetRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_GetRoomInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).GetRoomInfo(ctx, req.(*GetRoomInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_UpdateRoomInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).UpdateRoomInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_UpdateRoomInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).UpdateRoomInfo(ctx, req.(*UpdateRoomInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).DeleteRoom(ctx, req.(*DeleteRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_RequestJoinRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).RequestJoinRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_RequestJoinRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).RequestJoinRoom(ctx, req.(*RequestJoinRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_GetJoinRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJoinRequestStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).GetJoinRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_GetJoinRequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).GetJoinRequestStatus(ctx, req.(*GetJoinRequestStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).SendMessage(ctx, req.(*SendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMessageReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YacenServer).GetMessages(m, &grpc.GenericServerStream[GetMessageReq, GetMessageRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Yacen_GetMessagesServer = grpc.ServerStreamingServer[GetMessageRes]

func _Yacen_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(YacenServer).UploadFile(&grpc.GenericServerStream[UploadFileReq, UploadFileRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Yacen_UploadFileServer = grpc.ClientStreamingServer[UploadFileReq, UploadFileRes]

func _Yacen_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(YacenServer).DownloadFile(m, &grpc.GenericServerStream[DownloadFileReq, DownloadFileRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Yacen_DownloadFileServer = grpc.ServerStreamingServer[DownloadFileRes]

func _Yacen_ApproveJoinRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveJoinRequestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).ApproveJoinRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_ApproveJoinRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).ApproveJoinRequest(ctx, req.(*ApproveJoinRequestReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_GiveExtendedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveExtendedRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).GiveExtendedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_GiveExtendedRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).GiveExtendedRights(ctx, req.(*GiveExtendedRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yacen_RemoveExtendedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveExtendedRightsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YacenServer).RemoveExtendedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Yacen_RemoveExtendedRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YacenServer).RemoveExtendedRights(ctx, req.(*RemoveExtendedRightsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Yacen_ServiceDesc is the grpc.ServiceDesc for Yacen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Yacen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yacen_api.v2_2.Yacen",
	HandlerType: (*YacenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Yacen_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoomInfo",
			Handler:    _Yacen_GetRoomInfo_Handler,
		},
		{
			MethodName: "UpdateRoomInfo",
			Handler:    _Yacen_UpdateRoomInfo_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Yacen_DeleteRoom_Handler,
		},
		{
			MethodName: "RequestJoinRoom",
			Handler:    _Yacen_RequestJoinRoom_Handler,
		},
		{
			MethodName: "GetJoinRequestStatus",
			Handler:    _Yacen_GetJoinRequestStatus_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Yacen_SendMessage_Handler,
		},
		{
			MethodName: "ApproveJoinRequest",
			Handler:    _Yacen_ApproveJoinRequest_Handler,
		},
		{
			MethodName: "GiveExtendedRights",
			Handler:    _Yacen_GiveExtendedRights_Handler,
		},
		{
			MethodName: "RemoveExtendedRights",
			Handler:    _Yacen_RemoveExtendedRights_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _Yacen_GetMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _Yacen_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _Yacen_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yacen-api/yacen/latest/api.proto",
}
